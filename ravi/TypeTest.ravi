let ( <| ) f x = f x
end

type 'a List =
  | Empty
  | Cons of 'a * ('a List)

module Game =

  type Player = Hero of String * Int

  let hit player damage =
      match player with
      | Hero (name, hp) -> Hero (name, hp - damage)
  end

end

let player name = Game.Hero(name, 10)
end

let append l el =
  match l with
  | Empty -> Cons(el, l)
  | Cons (_, t) -> append t el
end

let count l =
  let aux l n =
    match l with
    | Empty -> n
    | Cons (h, t) -> aux t (1 + n)
  in
  aux l 0
end

let l _ = Cons("", Cons("", Cons("", Cons("", Cons("", Cons("", Cons("", Empty)))))))
end

print <| Game.hit (player "Andy") 5;

print <| count (l ());
