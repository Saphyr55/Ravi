
let testList =
  [ "a"
  ; begin
      ("0")
    end
  ; "9"
  ]
end

let testUniqueList = [ "7" ]
end

let testEmptyList = [ ]
end

print testList;
print testUniqueList;
print testEmptyList;

let concatListAndPrint _ = print
  (concat testList [ "2"; () ])
end

let f msg phi =
  let t = "Andy" in
  let s = "Matthieu" in
  phi (format msg [t; s])
end

concatListAndPrint ();
f "Hello, %s and %s!" print;

let fRec x =
  let _ = print x in
  fRec x
end

let isEmpty l =
  match l with
  | [] -> "true"
  | h :: _ ->
    begin
      let _ = print h in
      "false"
    end
end

print (isEmpty []);
print (isEmpty ("8" :: "8" :: []));

let map f l =
  match l with
  | [] -> []
  | h :: t -> (f h) :: map f t
end

let mapTestList f = map f testList
end

print (mapTestList (fun e -> format "Element: %s" [e]));


