let ( ** ) x y =
  let aux x n r =
    match n with
    | 0 -> r
    | _ -> aux x (n - 1) (r * x)
  in
  aux x y 1
end

module M =

  let myFuncInM _ =
    mySecondFuncInM ()
  end

  let mySecondFuncInM = fun _ ->
    print "Hello World!"
  end

end


module List =

  let ( @ ) l1 l2 = concat l1 l2
  end

  type IntList =
    | Empty
    | Cons of Int * List
  end

  let empty = []
  end

  let isEmpty l =
    match l with
    | [] -> 1
    | _ -> 0
  end

  let map f l =
    match l with
    | [] -> []
    | h :: t -> [f h] @ map f t
  end

  let count l =
    let aux l n =
      match l with
      | [] -> n
      | _ :: t -> aux t (n - 1)
    in
    aux l
  end

end

let l =
  [ "a"
  ; begin
      ("0")
    end
  ; "9"
  ]
end

let ( @ ) l1 l2 = List.( @ ) l1 l2
end

let ( |> ) x f = f x
end

let ( <| ) f x = f x
end

let concatListAndPrint _ =
  (* My comment *)
  print <| l @ [ "2"; "Not a unit." ]
end

let f msg phi =

  (*
    My second comment
  *)

  let t = "Andy" in
  let s = "Matthieu" in

  let () = print "x" in

  phi <| format msg [t; s]

end

concatListAndPrint ();
print |> f "Hello, %s and %s!";

print ( List.isEmpty [] );
print ( List.isEmpty ["8"; "8"; List.empty] );

let mapTestList f = List.map f l
end

print <| mapTestList ( fun e -> format "Element: %s" [e] );
print 9.48462;
let x = 2
end

print <| 1 + x * x + 1;

List.count l 0 |> print;

print <| 2 ** 8;

