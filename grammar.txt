Program -> Statement Program'
Program' -> Program
        | epsilon

Statement -> Let
	         | Instr

Instr -> Expr ;

Module -> module ModuleName = ModuleContent end
ModuleContent -> ModuleContent'
ModuleContent' -> Let ModuleContent
                | epsilon

Let -> let ValueName Parameters = Expr end

Parameters -> ValueName Parameters
       | epsilon

Expr -> Expr Argument
      | Expr :: Expr
      | List
      | Constant
      | ValueName
      | let ValueName Parameters = Expr in Expr
      | fun Param -> Expr
      | ModuleName . ValueName
      | ( Expr )
      | begin Expr end
      | match Expr with Pattern

Pattern -> _
        | Pattern :: Pattern
        | ValueName
        | ( Pattern )
        | Constant

Constant -> Int
        | Text
        | String
        | [ ]
        | ( )

Argument -> Expr Argument
         | epsilon

List -> [ Expr RestList ]
        | [ ]

RestList -> ; Expr RestList'
RestList' -> RestList
          | epsilon

Text -> text

Int -> [0-9]*

ValueName -> LowercaseIdentifier

ModuleName -> CapitalizedIdentifier

CapitalizedIdentifier ->
    [A-Z] Identifier
  | [A-Z] [_A-Za-z0-9] Identifier
  | epsilon

LowercaseIdentifier ->
    [_a-z] Identifier
  | [_a-z] [_A-Za-z0-9] Identifier
  | epsilon


