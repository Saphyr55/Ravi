Program -> Statement Program'
Program' -> Program
        | epsilon

Statement -> Let
	         | Instr
	         | Module

Instr -> Expr ;

Module -> module ModuleName = ModuleContent end

ModuleContent -> ModuleContent'
ModuleContent' -> Let ModuleContent
                | epsilon

Let -> let ValueName Parameters = Expr end

DeclType -> type PolyInformation TypeName = TypeD
TypeD -> Record | ADT

PolyInformation -> 'Identifier PolyInformation
          | epsilon

Record -> { }

ADT -> TypeName TypeInformation ADT'
ADT' -> | TypeName TypeInformation

TypeInformation -> of TypeExpr | epsilon

TypeExpr -> TypeExpr' TypeExpr'
TypeExpr' -> * TypeExpr
           | -> TypeExpr
           | ( TypeExpr )
           | ModuleName . TypeExpr
           | epsilon
           | TypeName
           | 'Identifier

Parameters -> LabelName Parameters'
Parameters' -> Parameters
            | epsilon

Expr -> Expr Expr'
      | List
      | Constant
      | ValueName
      | let ValueName Parameters = Expr in Expr
      | fun Parameters -> Expr
      | ModuleName . ValueName
      | ( Expr )
      | begin Expr end
      | match Expr with Pattern
Expr' -> Argument
        | InfixOp Expr
        | :: Expr

Pattern -> _
        | Pattern :: Pattern // Removed. Reason : Inference rule doesn't work.
        | LabelName
        | ( Pattern TuplePattern )
        | Constant
        | CaseName Pattern

TuplePattern -> , Pattern TuplePattern
              | epsilon

Constant -> Int
        | Float
        | Text
        | String
        | [ ]
        | ( )

Argument -> Expr Argument'
Argument' -> Argument
        | epsilon

List -> [ List'
List' -> Expr RestList ]
        | ]

RestList -> ; Expr RestList'
RestList' -> RestList
          | epsilon

Int -> [0-9]*
Float -> [0-9]+ . [0-9]*

LabelName -> LowercaseIdentifier

ValueName -> LowercaseIdentifier
          | ( InfixOp )

ModuleName -> CapitalizedIdentifier

InfixOp -> InfixSymbol
InfixSymbol -> Operator InfixOp
            | epsilon
Operator -> $ | & | * | + | - | / | = | > | < | @ | ^

Identifier -> CapitalizedIdentifier | LowercaseIdentifier

CapitalizedIdentifier -> [A-Z] CapitalizedIdentifier'

CapitalizedIdentifier' -> CapitalizedIdentifier
                        | [_A-Za-z0-9] CapitalizedIdentifier
                        | epsilon

LowercaseIdentifier -> [_a-z] LowercaseIdentifier'

LowercaseIdentifier' -> LowercaseIdentifier
                    | [_A-Za-z0-9] LowercaseIdentifier
                    | epsilon


