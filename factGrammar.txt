Program -> Statement Program'
Program' -> Program
        | epsilon

Statement -> Let
	         | Instr
	         | Module

Instr -> Expr ;

Module -> module ModuleName = ModuleContent end
ModuleContent -> ModuleContent'
ModuleContent' -> Let ModuleContent
                | epsilon

Let -> let ValueName Parameters = Expr end

Parameters -> ValueName Parameters'
Parameters' -> Parameters
            | epsilon

Expr -> Expr Expr'
      | List
      | Constant
      | ValueName
      | let ValueName Parameters = Expr in Expr
      | fun Param -> Expr
      | ModuleName . ValueName
      | ( Expr )
      | begin Expr end
      | match Expr with Pattern
Expr' -> Argument
        | :: Expr

Pattern -> _
        | Pattern :: Pattern
        | ValueName
        | ( Pattern )
        | Constant

Constant -> Number // Not implemented yet
        | Text
        | String
        | [ ]
        | ( )

Argument -> Expr Argument'
Argument' -> Argument
        | epsilon

List -> [ List'
List' -> Expr Restlist ]
        | ]

RestList -> ; Expr RestList'
RestList' -> RestList
          | epsilon

Text -> text

Number -> [0-9]* // Not implemented yet

ValueName -> LowercaseIdentifier

ModuleName -> CapitalizedIdentifier

CapitalizedIdentifier -> [A-Z] CapitalizedIdentifier'

CapitalizedIdentifier' -> CapitalizedIdentifier
                        | [_A-Za-z0-9] CapitalizedIdentifier
                        | epsilon

LowercaseIdentifier -> [_a-z] LowercaseIdentifier'

LowercaseIdentifier' -> LowercaseIdentifier
                    | [_A-Za-z0-9] LowercaseIdentifier
                    | epsilon


